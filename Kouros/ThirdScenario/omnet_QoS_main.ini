[General]
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${ue}-${scheduler}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${ue}-${scheduler}-${repetition}.vec
seed-set = ${repetition}
**.vector-recording = true

################ Mobility parameters #####################

**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false


*.numUe = ${ue=1,5,10,25,50}

**.mac.schedulingDiscipline* = ${scheduler="QOS_PF", "LYAPUNOV_SCHEDULER"}

############### Number of Resource Blocks ################
**.numBands = 10 # this value should be kept equal to the number of RBs

############### Transmission Power ##################
**.ueTxPower = 26dBm
**.eNodeBTxPower = 40dBm
**.targetBler = 0.01
**.blerShift = 5

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


#------------------------------------#
# Config Standalone
#
# Topology configuration for the exemplary scenario for NR Standalone deployment
#
[Config Standalone]
network = simu5g.simulations.NR.networks.SingleCell_Standalone_Drb
sim-time-limit=100s

############### e/gNodeB configuration #################
*.gnb.mobility.initialX = 450m
*.gnb.mobility.initialY = 300m
*.gnb.cellularNic.nrRxSdapEntity.qfiContextFile = "qfi_drb_mapping_config.txt"
*.gnb.cellularNic.numDrbs = 7
*.gnb.cellularNic.rlc.drbIndex = 0
*.gnb.cellularNic.mac.amcType = "NRAmc"





# connect the UE's NIC to the corresponding serving gNB (NR side only)
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1

# UE position
*.ue[0].mobility.initialX = 450m
*.ue[0].mobility.initialY = 400m
*.ue[1].mobility.initialX = 400m
*.ue[1].mobility.initialY = 350m
*.ue[2].mobility.initialX = 500m
*.ue[2].mobility.initialY = 300m
*.ue[3].mobility.initialX = 500m
*.ue[3].mobility.initialY = 350m
*.ue[4].mobility.initialX = 400m
*.ue[4].mobility.initialY = 300m
#------------------------------------#
*.ue[*].**.NrTxSdapEntity.debug = true
*.ue[*].**.NrTxSdapEntity.verbose = true
*.**.NrTxSdapEntity.* = debug
*.ue[*].cellularNic.nrTxSdapEntity.qfiContextFile = "qfi_drb_mapping_config.txt"
*.ue[*].cellularNic.numDrbs = 7
*.ue[*].cellularNic.rlc.drbIndex = 0
#------------------------------------#
# Buffer size
*.ue[*].cellularNic.nrRlc[*].**.queueSize=1000B
*.ue[*].cellularNic.nrMac.queueSize = 1000B
*.ue[*].cellularNic.rlc.*.queueSize = 1000B
*.ue[*].cellularNic.mac.queueSize=1000B

*.gnb.cellularNic.nrRlc[*].**.queueSize=1000B
*.gnb.cellularNic.nrMac.queueSize = 1000B
*.gnb.cellularNic.rlc.*.queueSize = 1000B
*.gnb.cellularNic.mac.queueSize=1000B




#------------------------------------#
# Config VoIP-DL
#
# General configuration for Voice-over-IP DL traffic to the UE
#
[Config VoIP-DL]
extends=Standalone

# multiple UDP applications for each UE
*.ue[*].numApps = 4

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = 4

#============= Application Setup =============
*.ue[*].app[*].typename = "VoIPReceiver"
*.ue[*].app[0].localPort = 3000
*.ue[*].app[1].localPort = 3001
*.ue[*].app[2].localPort = 3002
*.ue[*].app[3].localPort = 3003

*.server.app[*].packetSize = 40B
*.server.app[*].destAddress = "ue[0]" # obtain the address of the client by reading its index in the array of udp Apps
*.server.app[0].localPort = 3088+ancestorIndex(0)
*.server.app[1].localPort = 3089+ancestorIndex(0)
*.server.app[2].localPort = 3090+ancestorIndex(0)

*.server.app[*].typename = "VoIPSender"
*.server.app[*].startTime = uniform(0s,0.02s)
#------------------------------------#



#------------------------------------#
# Config VoIP-UL
#
# General configuration for Voice-over-IP UL traffic from the UE
#
[Config UDP-UL]
extends=Standalone



############## Scheduler configuration ##################

# multiple UDP applications for each UE
*.ue[*].numApps = 3

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = 3

#============= Application Setup =============
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].display-name = "vehicle control"
*.server.app[0].io.localPort = 1000
*.server.app[1].display-name = "video"
*.server.app[1].io.localPort = 1001
*.server.app[2].display-name = "best effort"
*.server.app[2].io.localPort = 1002

*.ue[*].app[0].typename = "UdpSourceApp"
*.ue[*].app[0].display-name = "vehicle control"
*.ue[*].app[0].io.destAddress = "server"
*.ue[*].app[0].io.destPort = 1000
*.ue[*].app[0].source.packetLength = 150B
*.ue[*].app[0].source.productionInterval = intuniform(44ms, 45ms)



*.ue[*].app[1].typename = "UdpSourceApp"
*.ue[*].app[1].display-name = "video"
*.ue[*].app[1].io.destAddress = "server"
*.ue[*].app[1].io.destPort = 1001
# --- 30 FPS Video Stream (using intuniform) ---
# This expression creates a bimodal distribution:
# - 95% of packets will be 200B (small P/B-frames)
# - 5% of packets will be 1000B (large I-frames)
*.ue[*].app[1].source.packetLength = int(200B + bernoulli(0.05) * 1000B)
# Packet interval is fixed to match a 30 FPS camera
*.ue[*].app[1].source.productionInterval = 33.3ms 


# --- 60 FPS Video Stream (using intuniform) ---
# Packet interval is fixed to match a 60 FPS camera (1s / 60)
#*.ue[*].app[1].source.productionInterval = 16.7ms
#*.ue[*].app[1].source.packetLength = intuniform(150B, 1450B)


# Packet size is a random integer between 200 and 1450 bytes.
# Covers P/B-frames and larger I-frames.
#*.ue[*].app[1].source.packetLength = intuniform(200, 1450)*1B
##########

*.ue[*].app[2].typename = "UdpSourceApp"
*.ue[*].app[2].display-name = "BestEffort"
*.ue[*].app[2].io.destAddress = "server"
*.ue[*].app[2].io.destPort = 1002
*.ue[*].app[2].source.packetLength = int(64B + bernoulli(0.3) * 1386B)
*.ue[*].app[2].source.productionInterval = pareto_shifted(1.2, 12ms, 1ms)
*.ue[*].app[2].source.initialProductionOffset = uniform(0ms, 5ms)


*.ue[*].app[0].source.qfi = 4
*.ue[*].app[1].source.qfi = 2
*.ue[*].app[2].source.qfi = 7

*.ue[*].app[*].source.initialProductionOffset = uniform(0ms, 5ms)
*.ue[*].app[*].startTime = uniform(0s,0.02s)                           







#------------------------------------#




