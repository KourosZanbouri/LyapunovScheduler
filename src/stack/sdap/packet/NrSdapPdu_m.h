//
// Generated file, do not edit! Created by opp_msgtool 6.1 from stack/sdap/packet/NrSdapPdu.msg.
//

#ifndef __SIMU5G_NRSDAPPDU_M_H
#define __SIMU5G_NRSDAPPDU_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace simu5g {

class NrSdapPdu;

}  // namespace simu5g

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace simu5g {

/**
 * Class generated from <tt>stack/sdap/packet/NrSdapPdu.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // SDAP header used to represent an SDAP PDU in the NR stack.
 * // This header is attached to the payload in the SDAP layer.
 * //
 * class NrSdapPdu extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(1);
 *     uint8_t qfi;                       // QoS Flow Identifier (6-bit field in SDAP spec)
 *     bool d_c;                          // Data/Control bit (true = data, false = control)
 *     bool reflectiveQoSIndicator = false; // Enables Reflective QoS (optional, default false)
 * 
 * }
 * </pre>
 */
class NrSdapPdu : public ::inet::FieldsChunk
{
  protected:
    uint8_t qfi = 0;
    bool d_c = false;
    bool reflectiveQoSIndicator = false;

  private:
    void copy(const NrSdapPdu& other);

  protected:
    bool operator==(const NrSdapPdu&) = delete;

  public:
    NrSdapPdu();
    NrSdapPdu(const NrSdapPdu& other);
    virtual ~NrSdapPdu();
    NrSdapPdu& operator=(const NrSdapPdu& other);
    virtual NrSdapPdu *dup() const override {return new NrSdapPdu(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getQfi() const;
    virtual void setQfi(uint8_t qfi);

    virtual bool getD_c() const;
    virtual void setD_c(bool d_c);

    virtual bool getReflectiveQoSIndicator() const;
    virtual void setReflectiveQoSIndicator(bool reflectiveQoSIndicator);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NrSdapPdu& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NrSdapPdu& obj) {obj.parsimUnpack(b);}


}  // namespace simu5g


namespace omnetpp {

template<> inline simu5g::NrSdapPdu *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::NrSdapPdu*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SIMU5G_NRSDAPPDU_M_H

